{
    "version": "0.6",
    "pageContent":
	{
        "_comments": "JSON object that contains data for page labels, buttons, etc.",
        "navItems":
		{
            "_common":
      			{
                "buttonBackToGallery":
        				{
                    "name": "Back To Gallery",
          					"method": "backToGallery()",
          					"idName": "backToGallery"
                },
                "buttonStartTutorial":
        				{
                    "name": "Start Tutorial",
          					"method": "startTutorialFromDetailsScreen()",
          					"idName": "startTutorial"
                },
        				"buttonViewDetails":
        				{
                    "name": "View Details",
          					"method": "viewDetails()",
          					"idName": "stepsViewDetails"
                }
            }
        }
    },
    "tutorial":
  	{
        "_common":
    		{
            "name": "Getting started with ACEv11 - Policy Projects and Policies",
            "shortDescription": "Learn about configuring ACE behavior using Policies",
            "durationText": "This tutorial takes approximately",
            "durationTime": "15 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "EventRoutingFlow",
            "helpLink":
      			{
                "text": "IBM Knowledge Center",
                "link": "/com.ibm.etools.msgbroker.helphome.doc/help_home_msgbroker.htm"
            }
        },
        "pageDetails":
    		{
            "topicsName": "Tutorial Topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList":
      			[
                {
                    "title": "Creating a Policy Project"
                },
                {
                    "title": "Creating a Policy within a Policy Project"
                },
                {
                    "title": "Configuring a simple Policy"
                },
                {
                    "title": "Deploying and seeing the effects of a Policy"
                }
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList":
      			[
                {
                    "title": "Understand how to create a Policy within a Policy Project, configure it and then build it into a Bar file for deployment."
                }
            ],
            "summary":
      			{
                "overviewName": "OVERVIEW",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections":
        				[
                    {
                        "section": "This tutorial demonstrates how to create a simple Policy within a Policy Project. The example guides you through the creation of an Activity Log Policy which is deployed alongside a simple flow. The Activity Log Policy specifies how App Connect Enterprise should log activity associated with the deployed flow, saved directly to a local file."
                    },
                    {
                        "section": "App Connect Enterprise v11 introduces the concept of a Policy Project which can be created in the Toolkit, and is used to hold one or more policies. Policies are used to control connection properties and operational properties which are required by the ACE runtime. A policy can be used by an administrator to override or abstract some specific property values. For example sensitive data  which might differ between runtime environments such as Dev / Test / Production."
					},
					{
						"section": "Policies can also be used to provide global properties that have wider scope than a message flow node, such as the Activity Log example in this tutorial.  To understand more about policy overrides, a separate specific tutorial on this topic has been provided."
                    }
                ]
            }
        },
        "pageSteps":
    		{
            "create":
      			{
                "overview":
        				{
                    "name": "Create",
                    "heading": "Import projects",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections":
          					[
                        		{
                            "section": "Click <span class='uicontrol'>Import</span> and the <span class='application'>SimpleApp</span> application and the <span class='application'>SimplePolicyProject</span> policy project will be imported into your workspace"
                        		},
                  			{
                  			    "section": "This simple application contains a single messageflow named <span class='application'>HTTPEcho</span> which listens for HTTP data and just echoes the same data back in response. <span class='application'>SimplePolicyProject</span> contains a single policy which is of type <span class='application'>Activity Log</span>. "
							},
							{
								"section":"Activity Log information helps you to understand what your message flows are doing by providing a high-level overview of interactions with external resources. Activity Log messages are concise and avoid technical complexity, although more information is provided in the message detail. Because the log entries are short, uncomplicated, and focused on single activities, they can be quickly scanned and understood. Patterns of behavior and changes to such patterns are easier to identify than in more extensive product trace. Activity Logs can be written to a circular file system. The ActivityLog policy is used to set up file logging if you want continuous logging of activities over a long period. In the next section we will deploy the policy and message flow and observe their behavior."								
                  			}
                    ]
                },
                "actions":
        				{
                    "title": "Create Actions",
                    "details":
          					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare":
      			{
                "overview":
        				{
                    "name": "Prepare",
                    "heading": "Prepare an Integration Server",
                    "_prepareComment": "Enable resource statistics tracking:",
                    "sections":
          					[
                      {
                        "steps":
                        {
                          "type": "ordered",
                          "details":
                          [
                            {
                                "details": "Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and run the following command: <br><code>mqsicreateworkdir C:\\MyServer</code><br> where <b>C:\\MyServer</b> will the working directory for your Integration Server."
                            },
                            {
                                "details": "Open the policy named <span class='application'>MyActivityLogPolicy.policyxml</span> inside the <span class='application'>SimplePolicyProject</span>"								
                            },
                            {
                                "details": "Locate the <code>File name</code> property, set the value to <code>C:\\MyServer\\ActivityLog.txt</code> and save the policy."
                            },
                            {
                                "details": "Create a Broker Archive file inside <span class='application'>SimplePolicyProject</span> named <span class='application'>SimpleDeploy.bar</span>"
                            },
                            {
                                "details": "Build the application and policy projects into the BAR file:<br> - Select the Applications radio button and select the <span class='application'>SimpleApp</span> application<br> - Select the Policies radio button and select the <span class='application'>SimplePolicyProject<br> - Click the 'Build and Save' button to generate the contents in the BAR file."
                            },
                            {
                                "details": "Start an Integration Server by typing the following command into the ACE Command Console:<br><code>IntegrationServer --name MyServer --work-dir C:\\MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code><br>"
                            },
                            {
                                "details": "Connect to the Integration Server from the Integration Explorer view in the Toolkit, then drag and drop deploy the <span class='application'>SimpleDeploy.bar</span>"
                            }
                          ]
                        }
                      }
                    ]
                }
            },
            "run":
      			{
                "overview":
        				{
                    "name": "Run",
                    "heading": "Follow these steps to complete the tutorial",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                    "sections":
          					[
                        {
                            "section": "Follow the following steps to complete the tutorial.",
                            "steps":
              							{
                                "type": "ordered",
                                "details":
                								[
                                    {
                                        "details": "Test the message flow by sending HTTP data to it using a client such as cURL:<br><code>curl -X POST http://localhost:7900/HTTPEcho -d HelloWorld</code><br>The message flow should echo back the same HelloWorld message to the HTTP client. Repeat this test a few times."
									},									
                                    {
                                        "details": "Navigate to the directory location which was specified when editting the Activity Log policy:<br><code>C:\\MyServer</code> and you should see a text file with the name ActivityLog.txt"
                                    },
                        				    {
                                        "details": "Open this file in your preferred text editor and you should see log entries formatted as comma separated data. Each log line corresponds to one of the curl requests which you just made."
                        				    },
                        				    {
                                        "details": "This concludes our simple example demonstrating how to use an Activity Log Policy."
                        				    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    }
}
